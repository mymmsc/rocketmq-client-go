package message

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/mymmsc/go-rocketmq-client/v2"
)

func TestBatch(t *testing.T) {
	// the data follow is generated by the java sdk, from the message with:
	// 1. body "hello, world"
	// 2. properties: {"a":"a"}
	exp := []byte{0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 0, 4, 97, 1, 97, 2}
	b := &Batch{
		Datas: []Data{
			{
				Body:       []byte("hello, world"),
				Properties: map[string]string{"a": "a"},
			},
			{
				Body:       []byte("hello, world"),
				Properties: map[string]string{"a": "a"},
			},
		},
	}

	ret := b.encode()
	assert.Equal(t, 2*len(exp), len(ret))
	assert.Equal(t, exp, ret[:len(exp)])
	assert.Equal(t, exp, ret[len(exp):])
}

func TestEncodeData(t *testing.T) {
	// the data follow is generated by the java sdk, from the message with:
	// 1. body "hello, world"
	// 2. properties: {"a":"a"}
	exp := []byte{0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 0, 4, 97, 1, 97, 2}

	m := &Data{
		Body:       []byte("hello, world"),
		Properties: map[string]string{"a": "a"},
	}

	assert.Equal(t, exp, encode(m, encodedLength(m), make([]byte, 256)))
}

func TestBatchToMessage(t *testing.T) {
	b := &Batch{Topic: rocketmq.RetryGroupTopicPrefix}
	// bad topic
	_, err := b.ToMessage()
	assert.Equal(t, errRetryGroupTopic, err)
	b.Topic = "TestBatchToMessage"

	// wait store inconsistant
	b.Datas = []Data{
		{Properties: map[string]string{}},
		{Properties: map[string]string{PropertyWaitStoreMsgOK: "false"}},
	}
	_, err = b.ToMessage()
	assert.Equal(t, errInconsistantWaitStoreOK, err)

	// OK
	b.Datas = []Data{
		{Properties: map[string]string{"a": "a"}, Body: []byte("hello, world")},
		{Properties: map[string]string{"a": "a"}, Body: []byte("hello, world")},
	}
	b.Flag = 12

	m, err := b.ToMessage()
	assert.Nil(t, err)
	assert.NotNil(t, m)
	assert.Equal(t, b.Topic, m.Topic)
	assert.Equal(t, b.Flag, m.Flag)
	assert.True(t, m.GetWaitStoreMsgOK())

	assert.True(t, b.Datas[0].Properties[PropertyUniqClientMessageIDKeyidx] != "")
	assert.True(t, b.Datas[1].Properties[PropertyUniqClientMessageIDKeyidx] != "")
}
